use serde::{Deserialize, Deserializer};
use serde::de::{self, Visitor};
use std::fmt;

#[derive(Debug)]
struct Date {
    year: i16,
    month: i8,
    day: i8,
}

impl Date {
    fn new(input: &str) -> Date {
        let mut parts = input.splitn(3, '-');
        let year = parts.next().unwrap().parse().unwrap();
        let month = parts.next().unwrap().parse().unwrap();
        let day = parts.next().unwrap().parse().unwrap();
        
        Date { year, month, day }
    }
}

// Implement custom deserialization for Date
impl<'de> Deserialize<'de> for Date {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        struct DateVisitor;

        impl<'de> Visitor<'de> for DateVisitor {
            type Value = Date;

            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
                formatter.write_str("a date string in the format YYYY-MM-DD")
            }

            fn visit_str<E>(self, value: &str) -> Result<Date, E>
            where
                E: de::Error,
            {
                Ok(Date::new(value))
            }
        }

        deserializer.deserialize_str(DateVisitor)
    }
}

// Custom deserialization function for f64 fields
fn deserialize_f64_from_string<'de, D>(deserializer: D) -> Result<f64, D::Error>
where
    D: Deserializer<'de>,
{
    let s = String::deserialize(deserializer)?;
    s.parse::<f64>().map_err(de::Error::custom)
}
