use serde::{Deserialize, Deserializer};
use serde::de::{self, Visitor};
use std::fmt;

#[derive(Debug)]
struct Date {
    year: i16,
    month: i8,
    day: i8,
}

impl Date {
    fn new(input: &str) -> Date {
        let mut parts = input.splitn(3, '-');
        let year = parts.next().unwrap().parse().unwrap();
        let month = parts.next().unwrap().parse().unwrap();
        let day = parts.next().unwrap().parse().unwrap();
        
        Date { year, month, day }
    }
}

// Implement custom deserialization for Date
impl<'de> Deserialize<'de> for Date {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        struct DateVisitor;

        impl<'de> Visitor<'de> for DateVisitor {
            type Value = Date;

            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
                formatter.write_str("a date string in the format YYYY-MM-DD")
            }

            fn visit_str<E>(self, value: &str) -> Result<Date, E>
            where
                E: de::Error,
            {
                Ok(Date::new(value))
            }
        }

        deserializer.deserialize_str(DateVisitor)
    }
}

// Custom deserialization function for f64 fields
fn deserialize_f64_from_string<'de, D>(deserializer: D) -> Result<f64, D::Error>
where
    D: Deserializer<'de>,
{
    let s = String::deserialize(deserializer)?;
    s.parse::<f64>().map_err(de::Error::custom)
}




//300 per 5 minute

struct GameType {
    id: i8,
    type_name: String,
    database_name: String,
    clean_name: String,
}

impl GameType {
    fn new(id: i8, type_name: &str, database_name: &str, clean_name: &str) -> GameType {
        GameType {
            id,
            type_name: type_name.to_string(),
            database_name: database_name.to_string(),
            clean_name: clean_name.to_string(),
        }
    }
}


fn main() {
    let game_types = vec![
        GameType::new(2, "QUAKECRAFT", "Quake", "Quake"),
        GameType::new(3, "WALLS", "Walls", "Walls"),
        GameType::new(4, "PAINTBALL", "Paintball", "Paintball"),
        GameType::new(5, "SURVIVAL_GAMES", "HungerGames", "Blitz Survival Games"),
        GameType::new(6, "TNTGAMES", "TNTGames", "TNT Games"),
        GameType::new(7, "VAMPIREZ", "VampireZ", "VampireZ"),
        GameType::new(13, "WALLS3", "Walls3", "Mega Walls"),
        GameType::new(14, "ARCADE", "Arcade", "Arcade"),
        GameType::new(17, "ARENA", "Arena", "Arena"),
        GameType::new(20, "UHC", "UHC", "UHC Champions"),
        GameType::new(21, "MCGO", "MCGO", "Cops and Crims"),
        GameType::new(23, "BATTLEGROUND", "Battleground", "Warlords"),
        GameType::new(24, "SUPER_SMASH", "SuperSmash", "Smash Heroes"),
        GameType::new(25, "GINGERBREAD", "GingerBread", "Turbo Kart Racers"),
        GameType::new(26, "HOUSING", "Housing", "Housing"),
        GameType::new(51, "SKYWARS", "SkyWars", "SkyWars"),
        GameType::new(52, "TRUE_COMBAT", "TrueCombat", "Crazy Walls"),
        GameType::new(54, "SPEED_UHC", "SpeedUHC", "Speed UHC"),
        GameType::new(55, "SKYCLASH", "SkyClash", "SkyClash"),
        GameType::new(56, "LEGACY", "Legacy", "Classic Games"),
        GameType::new(57, "PROTOTYPE", "Prototype", "Prototype"),
        GameType::new(58, "BEDWARS", "Bedwars", "Bed Wars"),
        GameType::new(59, "MURDER_MYSTERY", "MurderMystery", "Murder Mystery"),
        GameType::new(60, "BUILD_BATTLE", "BuildBattle", "Build Battle"),
        GameType::new(61, "DUELS", "Duels", "Duels"),
        GameType::new(63, "SKYBLOCK", "SkyBlock", "SkyBlock"),
        GameType::new(64, "PIT", "Pit", "Pit"),
        GameType::new(65, "REPLAY", "Replay", "Replay"),
        GameType::new(67, "SMP", "SMP", "SMP"),
        GameType::new(68, "WOOL_GAMES", "WoolGames", "Wool Wars"),
    ];

    let mode_id: i8 = 63;
    let api_key = 0;

    // Example usage
    for game_type in game_types {
        if game_type.id == mode_id {
            println!("Found game type: {}", game_type.clean_name);
        }
    }
}


